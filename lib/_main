import 'dart:convert';

import 'package:after_layout/after_layout.dart';
import 'package:firebase_ml_vision/firebase_ml_vision.dart';
import 'package:flutter/material.dart';
import 'package:folder_picker/folder_picker.dart';
import 'package:image_picker/image_picker.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:ural/auth_bloc.dart';
import 'package:ural/image_handler.dart';
import 'package:ural/urls.dart';
import 'package:ural/user_dialog.dart';
import 'package:ural/utils/async.dart';
import 'package:workmanager/workmanager.dart';
import 'textview.dart';
import 'auth_dialog.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:image/image.dart' as img;
import 'package:path_provider/path_provider.dart';
import 'dart:async';

Future<bool> uploadImagesToBackground() async {
  final pref = await SharedPreferences.getInstance();
  if (pref.containsKey("ural_default_folder")) {
    // final dir = Directory(pref.getString("ural_default_folder"));
    final dir = Directory("/storage/emulated/0/Pictures/Screenshots/");
    final token = pref.getString("uralToken");
    final textRecognizer = FirebaseVision.instance.textRecognizer();
    var config;
    if (pref.containsKey("ural_synced_config")) {
      config = json.decode(pref.getString("ural_synced_config"));
    } else {
      config = {};
    }
    int count = 0;
    List<FileSystemEntity> fileEntities = dir.listSync(recursive: true);

    for (FileSystemEntity entity in fileEntities) {
      if (entity is File) {
        if (count > 20) break;
        final result =
            await syncImageToServer(File(entity.path), textRecognizer, token);
        if (result.state == ResponseStatus.success) {
          config[entity.path.hashCode.toString()] = "";
          count++;
        }
      }
    }
    return true;
  }
  return false;
}

void callbackDispatcher() {
  print("CallBackDispacther RUNNING");
  Workmanager.executeTask((task, input) async {
    return await uploadImagesToBackground();
  });
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Workmanager.initialize(callbackDispatcher, isInDebugMode: true);
  runApp(App());
}

class App extends StatelessWidget {
  const App({Key key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        primaryColor: Color(0xFF424242),
        primaryColorLight: Color(0xFF6d6d6d),
        primaryColorDark: Color(0xFF1b1b1b),
        accentColor: Color(0xFFe91e63),
        scaffoldBackgroundColor: Color(0xFF6d6d6d),
        canvasColor: Color(0xFF1b1b1b),
        backgroundColor: Color(0xFF1b1b1b),
      ),
      routes: {"/": (context) => Home()},
    );
  }
}

class Home extends StatefulWidget {
  Home({Key key}) : super(key: key);

  @override
  _HomeState createState() => _HomeState();
}

class _HomeState extends State<Home> with AfterLayoutMixin {
  File _image;
  final _scaffold = GlobalKey<ScaffoldState>();
  final recognizer = FirebaseVision.instance.textRecognizer();
  Future getImage() async {
    var image = await ImagePicker.pickImage(source: ImageSource.gallery);

    setState(() {
      _image = image;
    });
  }

  Future<List<TextBlock>> recognizeImage() async {
    final fbImage = FirebaseVisionImage.fromFile(_image);
    final visionText = await recognizer.processImage(fbImage);
    return visionText.blocks;
  }

  Future<VisionText> getTextFromImage() async {
    final fbImage = FirebaseVisionImage.fromFile(_image);
    final visionText = await recognizer.processImage(fbImage);
    return visionText;
  }

  Future<void> handleUpload() async {
    if (_image != null) {
      img.Image image = img.decodeImage(_image.readAsBytesSync());
      img.Image thumbnail = img.copyResize(image, width: 120);
      Directory tempDir = await getTemporaryDirectory();
      String encoded;
      var path = _image.path.split("/").last;
      final filename = path.split(".")[0] + ".jpg";
      File(tempDir.path + '/' + filename)
        ..writeAsBytes(img.encodeJpg(thumbnail)).then((file) async {
          encoded = base64.encode(await file.readAsBytes());
          // encoded = file.readAsBytesSync().toString();
        });
      String url = ApiUrls.root + ApiUrls.images;
      String text;
      await getTextFromImage().then((obj) => text = obj.text);
      String payload = json.encode({
        "filename": filename,
        "thumbnail": encoded,
        "image_path": _image.path,
        "text": text,
        "short_text": "",
      });
      try {
        final response = await http.post(url,
            body: payload,
            headers: ApiUrls.authenticatedHeader(Auth().user.token));
        if (response.statusCode == 201) {
          print("Image uploaded successfully");
        } else {
          print(response.body);
        }
      } catch (e) {
        print(e);
      }
    }
  }

  @override
  void initState() {
    super.initState();
  }

  Future<void> getPermissionStatus() async {
    PermissionStatus permission = await PermissionHandler()
        .checkPermissionStatus(PermissionGroup.storage);
    if (permission == PermissionStatus.granted) {
    } else if (permission == PermissionStatus.denied ||
        permission == PermissionStatus.unknown ||
        permission == PermissionStatus.restricted) {
      await PermissionHandler().requestPermissions([PermissionGroup.storage]);
      getPermissionStatus();
    }
  }

  void startBackGroundJob() async {
    await Workmanager.registerPeriodicTask(
        "uralfetchscreens", "ural_background",
        initialDelay: Duration(seconds: 5));
  }

  void setDefaultFolder(String path) async {
    final pref = await SharedPreferences.getInstance();
    pref.setString("ural_default_folder", path);
  }

  @override
  void afterFirstLayout(BuildContext context) async {
    final authState = await Auth().authenticate();
    if (authState.state == ResponseStatus.failed)
      await showDialog(
        context: context,
        child: AuthenticationDialog(),
        barrierDismissible: false,
      );
    await getPermissionStatus();
    startBackGroundJob();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffold,
      appBar: AppBar(
        elevation: 0,
        title: Text(
          "Ural",
          // style: TextStyle(color: Colors.black),
        ),
        actions: <Widget>[
          IconButton(
              icon: Icon(
                Icons.person,
                // color: Colors.black,
              ),
              onPressed: () {
                showDialog(context: context, child: UserDialog());
              })
        ],
      ),
      body: ,
    );
  }
}
